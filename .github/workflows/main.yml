name: CI/CD

on:
  push:
    branches:
      - "main"

env:
  DOCKER_PATH: https://hub.docker.com/repository/docker
  # user
  USER_IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/capstone-user_service
  # facility
  FACILITY_IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/capstone-facility_service
  # ui
  UI_IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/capstone-ui

jobs:
  CI | user-service:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: set up docker buildx
        uses: docker/setup-buildx-action@v1

      - name: login to dockerhub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: build & push user-service to dockerhub
        uses: docker/build-push-action@v2
        with:
          context: ./service/user-service
          push: true
          tags: ${{ env.USER_IMAGE_NAME }}:latest
          env:
            USER_IMAGE_BUILDCACHE: ${{ env.USER_IMAGE_NAME }}:buildcache
          cache-from: type=registry,ref=${{ env.USER_IMAGE_BUILDCACHE }}
          cache-to: type=registry,ref=${{ env.USER_IMAGE_BUILDCACHE }},mode=max

  CI | facility-service:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: set up docker buildx
        uses: docker/setup-buildx-action@v1

      - name: login to dockerhub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: build & push facility-service to dockerhub
        uses: docker/build-push-action@v2
        with:
          context: ./service/facility-service
          push: true
          tags: ${{ env.FACILITY_IMAGE_NAME }}:latest
          env:
            FACILITY_IMAGE_BUILDCACHE: ${{ env.FACILITY_IMAGE_NAME }}:buildcache
          cache-from: type=registry,ref=${{ env.FACILITY_IMAGE_BUILDCACHE }}
          cache-to: type=registry,ref=${{ env.FACILITY_IMAGE_BUILDCACHE }},mode=max

  CI | ui:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: set up docker buildx
        uses: docker/setup-buildx-action@v1

      - name: login to dockerhub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: build & push ui image to dockerhub
        uses: docker/build-push-action@v2
        with:
          context: ./ui
          push: true
          tags: ${{ env.UI_IMAGE_NAME }}:latest
          env:
            UI_IMAGE_BUILDCACHE: ${{ env.UI_IMAGE_NAME }}:buildcache
          cache-from: type=registry,ref=${{ env.UI_IMAGE_BUILDCACHE }}
          cache-to: type=registry,ref=${{ env.UI_IMAGE_BUILDCACHE }},mode=max

  # CD | user-service:
  #   runs-on: ubuntu-latest

  #   needs: [CI | user-service]

  #   steps:
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     - name: Fill in the new image ID in the Amazon ECS task definition
  #       id: ui-task-def
  #       uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
  #       with:
  #         task-definition: ${{ env.USER_TASK_DEFINITION }}
  #         container-name: ${{ env.USER_CONTAINER_NAME }}
  #         image: ${{ env.DOCKER_PATH }}/${{ env.USER_IMAGE }}

  # CD | facility-service:
  #   runs-on: ubuntu-latest

  #   needs: [CI | facility-service, CD | user-service]

  #   steps:
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     - name: Fill in the new image ID in the Amazon ECS task definition
  #       id: facility-task-def
  #       uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
  #       with:
  #         task-definition: ${{ env.FACILITY_TASK_DEFINITION }}
  #         container-name: ${{ env.FACILITY_CONTAINER_NAME }}
  #         image: ${{ env.FACILITY_IMAGE }}

  # CD | facility-service:
  #   runs-on: ubuntu-latest

  #   needs: [CI | ui, CD | facility-service]

  #   steps:
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     - name: Fill in the new image ID in the Amazon ECS task definition
  #       id: ui-task-def
  #       uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
  #       with:
  #         task-definition: ${{ env.UI_TASK_DEFINITION }}
  #         container-name: ${{ env.UI_CONTAINER_NAME }}
  #         image: ${{ env.UI_IMAGE }}
